/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SurveyLink } from "./SurveyLink";
import { SurveyLinkCountArgs } from "./SurveyLinkCountArgs";
import { SurveyLinkFindManyArgs } from "./SurveyLinkFindManyArgs";
import { SurveyLinkFindUniqueArgs } from "./SurveyLinkFindUniqueArgs";
import { CreateSurveyLinkArgs } from "./CreateSurveyLinkArgs";
import { UpdateSurveyLinkArgs } from "./UpdateSurveyLinkArgs";
import { DeleteSurveyLinkArgs } from "./DeleteSurveyLinkArgs";
import { SurveyResponseFindManyArgs } from "../../surveyResponse/base/SurveyResponseFindManyArgs";
import { SurveyResponse } from "../../surveyResponse/base/SurveyResponse";
import { Channel } from "../../channel/base/Channel";
import { SurveyLinkService } from "../surveyLink.service";
@graphql.Resolver(() => SurveyLink)
export class SurveyLinkResolverBase {
  constructor(protected readonly service: SurveyLinkService) {}

  async _surveyLinksMeta(
    @graphql.Args() args: SurveyLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SurveyLink])
  async surveyLinks(
    @graphql.Args() args: SurveyLinkFindManyArgs
  ): Promise<SurveyLink[]> {
    return this.service.surveyLinks(args);
  }

  @graphql.Query(() => SurveyLink, { nullable: true })
  async surveyLink(
    @graphql.Args() args: SurveyLinkFindUniqueArgs
  ): Promise<SurveyLink | null> {
    const result = await this.service.surveyLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SurveyLink)
  async createSurveyLink(
    @graphql.Args() args: CreateSurveyLinkArgs
  ): Promise<SurveyLink> {
    return await this.service.createSurveyLink({
      ...args,
      data: {
        ...args.data,

        channel: args.data.channel
          ? {
              connect: args.data.channel,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SurveyLink)
  async updateSurveyLink(
    @graphql.Args() args: UpdateSurveyLinkArgs
  ): Promise<SurveyLink | null> {
    try {
      return await this.service.updateSurveyLink({
        ...args,
        data: {
          ...args.data,

          channel: args.data.channel
            ? {
                connect: args.data.channel,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SurveyLink)
  async deleteSurveyLink(
    @graphql.Args() args: DeleteSurveyLinkArgs
  ): Promise<SurveyLink | null> {
    try {
      return await this.service.deleteSurveyLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SurveyResponse], { name: "surveyResponses" })
  async findSurveyResponses(
    @graphql.Parent() parent: SurveyLink,
    @graphql.Args() args: SurveyResponseFindManyArgs
  ): Promise<SurveyResponse[]> {
    const results = await this.service.findSurveyResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Channel, {
    nullable: true,
    name: "channel",
  })
  async getChannel(
    @graphql.Parent() parent: SurveyLink
  ): Promise<Channel | null> {
    const result = await this.service.getChannel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
