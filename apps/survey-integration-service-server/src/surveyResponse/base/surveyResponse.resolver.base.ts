/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SurveyResponse } from "./SurveyResponse";
import { SurveyResponseCountArgs } from "./SurveyResponseCountArgs";
import { SurveyResponseFindManyArgs } from "./SurveyResponseFindManyArgs";
import { SurveyResponseFindUniqueArgs } from "./SurveyResponseFindUniqueArgs";
import { CreateSurveyResponseArgs } from "./CreateSurveyResponseArgs";
import { UpdateSurveyResponseArgs } from "./UpdateSurveyResponseArgs";
import { DeleteSurveyResponseArgs } from "./DeleteSurveyResponseArgs";
import { SurveyLink } from "../../surveyLink/base/SurveyLink";
import { SurveyResponseService } from "../surveyResponse.service";
@graphql.Resolver(() => SurveyResponse)
export class SurveyResponseResolverBase {
  constructor(protected readonly service: SurveyResponseService) {}

  async _surveyResponsesMeta(
    @graphql.Args() args: SurveyResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SurveyResponse])
  async surveyResponses(
    @graphql.Args() args: SurveyResponseFindManyArgs
  ): Promise<SurveyResponse[]> {
    return this.service.surveyResponses(args);
  }

  @graphql.Query(() => SurveyResponse, { nullable: true })
  async surveyResponse(
    @graphql.Args() args: SurveyResponseFindUniqueArgs
  ): Promise<SurveyResponse | null> {
    const result = await this.service.surveyResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SurveyResponse)
  async createSurveyResponse(
    @graphql.Args() args: CreateSurveyResponseArgs
  ): Promise<SurveyResponse> {
    return await this.service.createSurveyResponse({
      ...args,
      data: {
        ...args.data,

        surveyLink: args.data.surveyLink
          ? {
              connect: args.data.surveyLink,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SurveyResponse)
  async updateSurveyResponse(
    @graphql.Args() args: UpdateSurveyResponseArgs
  ): Promise<SurveyResponse | null> {
    try {
      return await this.service.updateSurveyResponse({
        ...args,
        data: {
          ...args.data,

          surveyLink: args.data.surveyLink
            ? {
                connect: args.data.surveyLink,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SurveyResponse)
  async deleteSurveyResponse(
    @graphql.Args() args: DeleteSurveyResponseArgs
  ): Promise<SurveyResponse | null> {
    try {
      return await this.service.deleteSurveyResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => SurveyLink, {
    nullable: true,
    name: "surveyLink",
  })
  async getSurveyLink(
    @graphql.Parent() parent: SurveyResponse
  ): Promise<SurveyLink | null> {
    const result = await this.service.getSurveyLink(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
