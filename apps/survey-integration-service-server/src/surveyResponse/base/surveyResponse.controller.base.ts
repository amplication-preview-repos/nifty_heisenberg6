/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SurveyResponseService } from "../surveyResponse.service";
import { SurveyResponseCreateInput } from "./SurveyResponseCreateInput";
import { SurveyResponse } from "./SurveyResponse";
import { SurveyResponseFindManyArgs } from "./SurveyResponseFindManyArgs";
import { SurveyResponseWhereUniqueInput } from "./SurveyResponseWhereUniqueInput";
import { SurveyResponseUpdateInput } from "./SurveyResponseUpdateInput";

export class SurveyResponseControllerBase {
  constructor(protected readonly service: SurveyResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SurveyResponse })
  async createSurveyResponse(
    @common.Body() data: SurveyResponseCreateInput
  ): Promise<SurveyResponse> {
    return await this.service.createSurveyResponse({
      data: {
        ...data,

        surveyLink: data.surveyLink
          ? {
              connect: data.surveyLink,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        rating: true,
        responseData: true,

        surveyLink: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SurveyResponse] })
  @ApiNestedQuery(SurveyResponseFindManyArgs)
  async surveyResponses(
    @common.Req() request: Request
  ): Promise<SurveyResponse[]> {
    const args = plainToClass(SurveyResponseFindManyArgs, request.query);
    return this.service.surveyResponses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        responseData: true,

        surveyLink: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SurveyResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async surveyResponse(
    @common.Param() params: SurveyResponseWhereUniqueInput
  ): Promise<SurveyResponse | null> {
    const result = await this.service.surveyResponse({
      where: params,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        responseData: true,

        surveyLink: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SurveyResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSurveyResponse(
    @common.Param() params: SurveyResponseWhereUniqueInput,
    @common.Body() data: SurveyResponseUpdateInput
  ): Promise<SurveyResponse | null> {
    try {
      return await this.service.updateSurveyResponse({
        where: params,
        data: {
          ...data,

          surveyLink: data.surveyLink
            ? {
                connect: data.surveyLink,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          rating: true,
          responseData: true,

          surveyLink: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SurveyResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSurveyResponse(
    @common.Param() params: SurveyResponseWhereUniqueInput
  ): Promise<SurveyResponse | null> {
    try {
      return await this.service.deleteSurveyResponse({
        where: params,
        select: {
          createdAt: true,
          id: true,
          rating: true,
          responseData: true,

          surveyLink: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
